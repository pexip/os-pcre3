Description: PCRE Library Heap Overflow Vulnerability
 PCRE is a regular expression C library inspired by the regular
 expression capabilities in the Perl programming language. The
 PCRE library is incorporated into a number of prominent programs,
 such as Adobe Flash, Apache, Nginx, PHP.
 PCRE library is prone to a vulnerability which leads to Heap Overflow.
 During the compilation of a malformed regular expression, more data is
 written on the malloced block than the expected size output by
 compile_regex. Exploits with advanced Heap Fengshui techniques may
 allow an attacker to execute arbitrary code in the context of the user
 running the affected application.
Author: Philip Hazel <ph10@hermes.cam.ac.uk>
Origin: upstream, http://vcs.pcre.org/pcre?view=revision&revision=1558
Bug: https://bugs.exim.org/show_bug.cgi?id=1636
Bug-Debian: https://security-tracker.debian.org/tracker/CVE-2015-3210
Last-Update: 2015-05-15
---
This patch header follows DEP-3: http://dep.debian.net/deps/dep3/
Index: pcre3-8.35/pcre_compile.c
===================================================================
--- pcre3-8.35.orig/pcre_compile.c
+++ pcre3-8.35/pcre_compile.c
@@ -7086,14 +7086,26 @@ for (;; ptr++)
           number. If the name is not found, set the value to 0 for a forward
           reference. */
 
+          recno = 0;
           ng = cd->named_groups;
           for (i = 0; i < cd->names_found; i++, ng++)
             {
             if (namelen == ng->length &&
                 STRNCMP_UC_UC(name, ng->name, namelen) == 0)
-              break;
+              {
+              open_capitem *oc;
+              recno = ng->number;
+              if (is_recurse) break;
+              for (oc = cd->open_caps; oc != NULL; oc = oc->next)
+                {
+                if (oc->number == recno)
+                  {
+                  oc->flag = TRUE;
+                  break;
+                  }
+                }
+              }
             }
-          recno = (i < cd->names_found)? ng->number : 0;
 
           /* Count named back references. */
 
Index: pcre3-8.35/testdata/testinput2
===================================================================
--- pcre3-8.35.orig/testdata/testinput2
+++ pcre3-8.35/testdata/testinput2
@@ -4068,4 +4068,6 @@ backtracking verbs. --/
 
 /((?+1)(\1))/BZ
 
+"(?J)(?'d'(?'d'\g{d}))"
+
 /-- End of testinput2 --/
Index: pcre3-8.35/testdata/testoutput2
===================================================================
--- pcre3-8.35.orig/testdata/testoutput2
+++ pcre3-8.35/testdata/testoutput2
@@ -14190,4 +14190,6 @@ Failed: parentheses are too deeply neste
         End
 ------------------------------------------------------------------
 
+"(?J)(?'d'(?'d'\g{d}))"
+
 /-- End of testinput2 --/
